class Solution {
    class Node {
        Node[] children = new Node[26];
        boolean eow = false;
    }
    
    Node root = new Node();
    public List<String> findWords(char[][] board, String[] words) {
         for(String word: words){
            Node temp = root;
            for(char ch: word.toCharArray()){
                if(temp.children[ch - 'a'] == null){
                    temp.children[ch - 'a'] = new Node();
                }
                temp = temp.children[ch - 'a'];
            }
            
            temp.eow = true;
        }
        
        boolean[][] vis = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                helper(board, vis, i, j, root, new StringBuilder());
            }
        }
        
        return new ArrayList<>(res);
    }
    
    HashSet<String> res = new HashSet<>();
    int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    void helper(char[][] board, boolean[][] vis, int i, int j, Node temp, StringBuilder sb){
        char ch = board[i][j];
        sb.append(ch);
        
        if(temp.children[ch - 'a'] == null){
            sb.deleteCharAt(sb.length() - 1);
            return;
        } else {
            temp = temp.children[ch - 'a'];
            if(temp.eow){
                res.add(sb.toString());
            }
        }
        
        vis[i][j] = true;
        for(int[] dir: dirs){
            int ii = i + dir[0];
            int jj = j + dir[1];
            if(ii >= 0 && jj >= 0 && ii < board.length && jj < board[0].length && vis[ii][jj] == false){
                helper(board, vis, ii, jj, temp, sb);
            }
        }
        vis[i][j] = false;
        sb.deleteCharAt(sb.length() - 1);
    }
}