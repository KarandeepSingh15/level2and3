class Solution {
    class Node {
        Node[] children = new Node[26];
        boolean eow = false;
    }
    
    Node root = new Node();
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        for(String word: words){
            Node temp = root;
            for(char ch: word.toCharArray()){
                if(temp.children[ch - 'a'] == null){
                    temp.children[ch - 'a'] = new Node();
                }
                temp = temp.children[ch - 'a'];
            }
            
            temp.eow = true;
        }
        
        List<String> res = new ArrayList<>();
        for(String word: words){
            if(IsComplexWord(word, 0, 0) == true){
                res.add(word);
            }
        }
        return res;
    }
    
    boolean IsComplexWord(String word, int idx, int count){
        if(idx == word.length()){
            return count >= 2;
        }
        Node temp = root;
        for(int i = idx; i < word.length(); i++){
            char ch = word.charAt(i);
            if(temp.children[ch - 'a'] == null){
                return false;
            }
            temp = temp.children[ch - 'a'];
            if(temp.eow){
                boolean rres = IsComplexWord(word, i + 1, count + 1);
                if(rres){
                    return true;
                }
            }
        }
        
        return false;
    }
    
}